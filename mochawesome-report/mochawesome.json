{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-08T18:56:17.897Z",
    "end": "2024-07-08T18:56:35.665Z",
    "duration": 17768,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "41831eb1-31d5-4464-b75e-9ff92f3f181f",
      "title": "",
      "fullFile": "/Users/daniel/Documents/Data Daniel/mocking-api-selenium/test/mocha.js",
      "file": "/test/mocha.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f02f563f-3028-4fac-b14b-4285e6189374",
          "title": "User",
          "fullFile": "/Users/daniel/Documents/Data Daniel/mocking-api-selenium/test/mocha.js",
          "file": "/test/mocha.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User\"",
              "fullTitle": "User \"before each\" hook in \"User\"",
              "timedOut": false,
              "duration": 791,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser(Browser.CHROME).build();\nawait driver.navigate().to(MOCKING_API_URL);",
              "err": {},
              "uuid": "426753db-b55b-4855-9a46-a632c9d91277",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User\"",
              "fullTitle": "User \"after each\" hook in \"User\"",
              "timedOut": false,
              "duration": 56,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "2ae0481b-f402-4497-b683-718fdd87dbc8",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Able to see Add API",
              "fullTitle": "User Able to see Add API",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nconst elementText = await btnAddAPI.getText();\nassert.ok(elementText === UI_TEXT.btnAddAPI);",
              "err": {},
              "uuid": "014ab791-78a2-4822-8e7c-471c60e600a1",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to click Add API button",
              "fullTitle": "User Able to click Add API button",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nawait btnAddAPI.click();\nconst popup = await driver.findElement(By.xpath(XPATH.popupAddEdit));\nconst popupTitle = await driver\n  .findElement(By.xpath(XPATH.popupTitle))\n  .getText();\nlet displayValue = await popup.getCssValue(\"display\");\nassert.ok(displayValue !== \"none\");\nassert.ok(popupTitle === UI_TEXT.btnAddAPI);",
              "err": {},
              "uuid": "627c097b-bd31-42c2-9ece-9f42e187bded",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to see table column text",
              "fullTitle": "User Able to see table column text",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const tableTh = await driver.findElements(By.xpath(XPATH.tableHead));\ntableTh.forEach(async (val, idx) =>\n  assert.ok((await val.getText()) === UI_TEXT.tableTh[idx])\n);",
              "err": {},
              "uuid": "feac755f-1747-4523-92dc-c4d439ece0fc",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to copy URL from existing data",
              "fullTitle": "User Able to copy URL from existing data",
              "timedOut": false,
              "duration": 1309,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnCopyUrl = await driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnCopyURL), 1000)\n);\nawait btnCopyUrl.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 1000))\n  .getText();\nassert.ok(notificationText.includes(UI_TEXT.notificationCopiedAPI));",
              "err": {},
              "uuid": "be781e9d-20f0-4fd7-8945-0bc8b4fa9c79",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to copy CURL from existing data",
              "fullTitle": "User Able to copy CURL from existing data",
              "timedOut": false,
              "duration": 1302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnCopyUrl = await driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnCopyCURL), 1000)\n);\nawait btnCopyUrl.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 1000))\n  .getText();\nassert.ok(notificationText.includes(UI_TEXT.notificationCopiedAPI));",
              "err": {},
              "uuid": "ff96e32f-3534-4e06-b448-ee4efb0cd4d9",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to edit existing data",
              "fullTitle": "User Able to edit existing data",
              "timedOut": false,
              "duration": 2090,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const editData = driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnEditAPI), 1000)\n);\nawait editData.click();\nconst popupTitle = await driver\n  .findElement(By.xpath(XPATH.popupTitle))\n  .getText();\nassert.ok(popupTitle === UI_TEXT.btnEditAPI);",
              "err": {},
              "uuid": "2fc0ccc4-a795-4f49-9374-8430c4a450bb",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to delete existing data",
              "fullTitle": "User Able to delete existing data",
              "timedOut": false,
              "duration": 3100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteData = driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnDeleteAPI), 1000)\n);\nawait driver.wait(until.elementIsVisible(deleteData), 1000);\nawait driver.executeScript(\n  'arguments[0].scrollIntoView({ behavior: \"smooth\" });',\n  deleteData\n);\nawait deleteData.click();\nawait driver.wait(until.stalenessOf(deleteData), 1000);",
              "err": {},
              "uuid": "60e90021-2d98-407b-b7ec-b3413aa52d4a",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to request API when required field is empty",
              "fullTitle": "User Unable to request API when required field is empty",
              "timedOut": false,
              "duration": 729,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nawait btnAddAPI.click();\nconst inputName = await driver.findElement(By.xpath(XPATH.inputNamePopup));\nconst selectPath = await driver.findElement(\n  By.xpath(XPATH.selectMethodPopup)\n);\nconst inputPath = await driver.findElement(By.xpath(XPATH.inputPathPopup));\nconst inputResponseCode = await driver.findElement(\n  By.xpath(XPATH.inputResponseCodePopup)\n);\nconst inputRequest = await driver.findElement(\n  By.xpath(XPATH.textAreaRequestPopup)\n);\nconst inputResponse = await driver.findElement(\n  By.xpath(XPATH.textAreaResponsePopup)\n);\nconst btnAddPopup = await driver.findElement(\n  By.xpath(XPATH.btnAddAPIPopup)\n);\nawait driver.actions().sendKeys(inputName, \"test\").perform();\nconst optionSelect = await selectPath.findElement(\n  By.xpath(`//option[. = 'GET']`)\n);\nawait optionSelect.click();\nawait driver.actions().sendKeys(inputPath, \"/test\").perform();\nawait driver.actions().sendKeys(inputResponseCode, \"200\").perform();\nawait driver\n  .actions()\n  .sendKeys(inputRequest, `{\"request\": \"request\"}`)\n  .perform();\n// await driver\n//   .actions()\n//   .sendKeys(inputResponse, \"{'response': 'response'}\")\n//   .perform();\n// response field is not filled\nawait btnAddPopup.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 1000))\n  .getText();\nconsole.log(notificationText);\nassert.ok(notificationText.includes(UI_TEXT.notificationRequiredFields));",
              "err": {},
              "uuid": "eb998de8-049a-43ac-aab8-11212765b7a4",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to request API when request field is empty",
              "fullTitle": "User Able to request API when request field is empty",
              "timedOut": false,
              "duration": 1358,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nawait btnAddAPI.click();\nconst inputName = await driver.findElement(By.xpath(XPATH.inputNamePopup));\nconst selectPath = await driver.findElement(\n  By.xpath(XPATH.selectMethodPopup)\n);\nconst inputPath = await driver.findElement(By.xpath(XPATH.inputPathPopup));\nconst inputResponseCode = await driver.findElement(\n  By.xpath(XPATH.inputResponseCodePopup)\n);\nconst inputResponse = await driver.findElement(\n  By.xpath(XPATH.textAreaResponsePopup)\n);\nconst btnAddPopup = await driver.findElement(\n  By.xpath(XPATH.btnAddAPIPopup)\n);\nawait driver.actions().sendKeys(inputName, \"test2\").perform();\nconst optionSelect = await selectPath.findElement(\n  By.xpath(`//option[. = 'GET']`)\n);\nawait optionSelect.click();\nawait driver.actions().sendKeys(inputPath, \"/test2\").perform();\nawait driver.actions().sendKeys(inputResponseCode, \"200\").perform();\nawait driver\n  .actions()\n  .sendKeys(inputResponse, `{\"response\": \"response\"}`)\n  .perform();\nawait btnAddPopup.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 10000))\n  .getText();\nassert.ok(notificationText.includes(UI_TEXT.notificationSuccess));",
              "err": {},
              "uuid": "f5485132-5150-478f-a68d-5e703740c527",
              "parentUUID": "f02f563f-3028-4fac-b14b-4285e6189374",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "014ab791-78a2-4822-8e7c-471c60e600a1",
            "627c097b-bd31-42c2-9ece-9f42e187bded",
            "feac755f-1747-4523-92dc-c4d439ece0fc",
            "be781e9d-20f0-4fd7-8945-0bc8b4fa9c79",
            "ff96e32f-3534-4e06-b448-ee4efb0cd4d9",
            "2fc0ccc4-a795-4f49-9374-8430c4a450bb",
            "60e90021-2d98-407b-b7ec-b3413aa52d4a",
            "eb998de8-049a-43ac-aab8-11212765b7a4",
            "f5485132-5150-478f-a68d-5e703740c527"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9955,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}