{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-08T17:19:39.276Z",
    "end": "2024-07-08T17:19:53.651Z",
    "duration": 14375,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9d0363fb-05e1-4d1c-ab8d-70c4ac858919",
      "title": "",
      "fullFile": "/Users/daniel/Documents/Data Daniel/mocking-api-selenium/test/mocha.js",
      "file": "/test/mocha.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
          "title": "User",
          "fullFile": "/Users/daniel/Documents/Data Daniel/mocking-api-selenium/test/mocha.js",
          "file": "/test/mocha.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User\"",
              "fullTitle": "User \"before each\" hook in \"User\"",
              "timedOut": false,
              "duration": 861,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser(Browser.CHROME).build();\nawait driver.navigate().to(MOCKING_API_URL);",
              "err": {},
              "uuid": "9df55fc1-4c56-4629-9ed8-6b20ccf5f22f",
              "parentUUID": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User\"",
              "fullTitle": "User \"after each\" hook in \"User\"",
              "timedOut": false,
              "duration": 53,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "ed7aa066-4b1d-4c09-8fd0-8b2327564d00",
              "parentUUID": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Able to see Add API",
              "fullTitle": "User Able to see Add API",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nconst elementText = await btnAddAPI.getText();\nassert.ok(elementText === UI_TEXT.btnAddAPI);",
              "err": {},
              "uuid": "4a6057cb-6fcc-4720-b5e6-fca20a2ac046",
              "parentUUID": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to click Add API button",
              "fullTitle": "User Able to click Add API button",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nawait btnAddAPI.click();\nconst popup = await driver.findElement(By.xpath(XPATH.popupAddEdit));\nconst popupTitle = await driver\n  .findElement(By.xpath(XPATH.popupTitle))\n  .getText();\nlet displayValue = await popup.getCssValue(\"display\");\nassert.ok(displayValue !== \"none\");\nassert.ok(popupTitle === UI_TEXT.btnAddAPI);",
              "err": {},
              "uuid": "69023d6b-414c-4554-a1bc-ee2e0c36661a",
              "parentUUID": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to see table column text",
              "fullTitle": "User Able to see table column text",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const tableTh = await driver.findElements(By.xpath(XPATH.tableHead));\ntableTh.forEach(async (val, idx) =>\n  assert.ok((await val.getText()) === UI_TEXT.tableTh[idx])\n);",
              "err": {},
              "uuid": "94a32266-9f6d-43bd-9490-6cbb38d57f77",
              "parentUUID": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to copy URL from existing data",
              "fullTitle": "User Able to copy URL from existing data",
              "timedOut": false,
              "duration": 1320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnCopyUrl = await driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnCopyURL), 1000)\n);\nawait btnCopyUrl.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 1000))\n  .getText();\nassert.ok(notificationText.includes(UI_TEXT.notificationCopiedAPI));",
              "err": {},
              "uuid": "d6b8d37b-b516-42a8-ba10-1d28f2887b5f",
              "parentUUID": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to copy CURL from existing data",
              "fullTitle": "User Able to copy CURL from existing data",
              "timedOut": false,
              "duration": 1302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnCopyUrl = await driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnCopyCURL), 1000)\n);\nawait btnCopyUrl.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 1000))\n  .getText();\nassert.ok(notificationText.includes(UI_TEXT.notificationCopiedAPI));",
              "err": {},
              "uuid": "bd8ecf82-54a9-47e0-a93d-95ecd1c9d07d",
              "parentUUID": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to edit existing data",
              "fullTitle": "User Able to edit existing data",
              "timedOut": false,
              "duration": 2078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const editData = driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnEditAPI), 1000)\n);\nawait editData.click();\nconst popupTitle = await driver\n  .findElement(By.xpath(XPATH.popupTitle))\n  .getText();\nassert.ok(popupTitle === UI_TEXT.btnEditAPI);",
              "err": {},
              "uuid": "fb54817c-dcc1-48e4-a9ca-4cd80c7a1793",
              "parentUUID": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to delete existing data",
              "fullTitle": "User Able to delete existing data",
              "timedOut": false,
              "duration": 3121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteData = driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnDeleteAPI), 1000)\n);\nawait driver.wait(until.elementIsVisible(deleteData), 1000);\nawait driver.executeScript(\n  'arguments[0].scrollIntoView({ behavior: \"smooth\" });',\n  deleteData\n);\nawait deleteData.click();\nawait driver.wait(until.stalenessOf(deleteData), 1000);",
              "err": {},
              "uuid": "b6ed2060-4add-4d9a-8875-0c0437a368e1",
              "parentUUID": "86a4e775-92af-46cb-a4c0-3ebd216d383e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a6057cb-6fcc-4720-b5e6-fca20a2ac046",
            "69023d6b-414c-4554-a1bc-ee2e0c36661a",
            "94a32266-9f6d-43bd-9490-6cbb38d57f77",
            "d6b8d37b-b516-42a8-ba10-1d28f2887b5f",
            "bd8ecf82-54a9-47e0-a93d-95ecd1c9d07d",
            "fb54817c-dcc1-48e4-a9ca-4cd80c7a1793",
            "b6ed2060-4add-4d9a-8875-0c0437a368e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7887,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}