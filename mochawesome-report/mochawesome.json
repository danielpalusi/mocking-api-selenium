{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-09T05:34:12.634Z",
    "end": "2024-07-09T05:34:35.547Z",
    "duration": 22913,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6c848f98-ad89-4d3d-aa97-c3d6de2801f8",
      "title": "",
      "fullFile": "/Users/daniel/Documents/Data Daniel/mocking-api-selenium/test/mocha.js",
      "file": "/test/mocha.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
          "title": "User",
          "fullFile": "/Users/daniel/Documents/Data Daniel/mocking-api-selenium/test/mocha.js",
          "file": "/test/mocha.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User\"",
              "fullTitle": "User \"before each\" hook in \"User\"",
              "timedOut": false,
              "duration": 788,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser(Browser.CHROME).build();\nawait driver.navigate().to(MOCKING_API_URL);",
              "err": {},
              "uuid": "a977793a-be02-4378-b59f-bb81c7556f27",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User\"",
              "fullTitle": "User \"after each\" hook in \"User\"",
              "timedOut": false,
              "duration": 56,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "33daa21c-f341-4c57-a89a-e443c1fe599d",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Able to see Add API",
              "fullTitle": "User Able to see Add API",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nconst elementText = await btnAddAPI.getText();\nassert.ok(elementText === UI_TEXT.btnAddAPI);",
              "err": {},
              "uuid": "31c4bd97-cb4e-4c0c-bd4c-210bd1d8023a",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to click Add API button",
              "fullTitle": "User Able to click Add API button",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nawait btnAddAPI.click();\nconst popup = await driver.findElement(By.xpath(XPATH.popupAddEdit));\nconst popupTitle = await driver\n  .findElement(By.xpath(XPATH.popupTitle))\n  .getText();\nlet displayValue = await popup.getCssValue(\"display\");\nassert.ok(displayValue !== \"none\");\nassert.ok(popupTitle === UI_TEXT.btnAddAPI);",
              "err": {},
              "uuid": "cb9d3aa4-cea1-4cfe-af6d-ce69f86042af",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to see table column text",
              "fullTitle": "User Able to see table column text",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const tableTh = await driver.findElements(By.xpath(XPATH.tableHead));\ntableTh.forEach(async (val, idx) =>\n  assert.ok((await val.getText()) === UI_TEXT.tableTh[idx])\n);",
              "err": {},
              "uuid": "32f16576-a7a2-46f0-ab26-23acd753ba00",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to copy URL from existing data",
              "fullTitle": "User Able to copy URL from existing data",
              "timedOut": false,
              "duration": 1313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnCopyUrl = await driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnCopyURL), 1000)\n);\nawait btnCopyUrl.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 1000))\n  .getText();\nassert.ok(notificationText.includes(UI_TEXT.notificationCopiedAPI));",
              "err": {},
              "uuid": "425f57a0-6c83-4f2b-b1b9-09ba3c2cd93a",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to copy CURL from existing data",
              "fullTitle": "User Able to copy CURL from existing data",
              "timedOut": false,
              "duration": 1519,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnCopyUrl = await driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnCopyCURL), 1000)\n);\nawait btnCopyUrl.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 1000))\n  .getText();\nassert.ok(notificationText.includes(UI_TEXT.notificationCopiedAPI));",
              "err": {},
              "uuid": "abf90043-3de5-4399-b853-126d1ee94752",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to edit existing data",
              "fullTitle": "User Able to edit existing data",
              "timedOut": false,
              "duration": 2135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const editData = driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnEditAPI), 1000)\n);\nawait editData.click();\nconst popupTitle = await driver\n  .findElement(By.xpath(XPATH.popupTitle))\n  .getText();\nassert.ok(popupTitle === UI_TEXT.btnEditAPI);",
              "err": {},
              "uuid": "0ffc45b6-acbe-47e3-ab2c-ab6df7c9cffa",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to delete existing data",
              "fullTitle": "User Able to delete existing data",
              "timedOut": false,
              "duration": 3124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteData = driver.wait(\n  until.elementLocated(By.xpath(XPATH.btnDeleteAPI), 1000)\n);\nawait driver.wait(until.elementIsVisible(deleteData), 1000);\nawait driver.executeScript(\n  'arguments[0].scrollIntoView({ behavior: \"smooth\" });',\n  deleteData\n);\nawait deleteData.click();\nawait driver.wait(until.stalenessOf(deleteData), 10000);",
              "err": {},
              "uuid": "0c219cbd-bad6-4db9-bc4d-fe95278032bc",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to request API when required field is empty",
              "fullTitle": "User Unable to request API when required field is empty",
              "timedOut": false,
              "duration": 694,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nawait btnAddAPI.click();\nconst inputName = await driver.findElement(By.xpath(XPATH.inputNamePopup));\nconst selectPath = await driver.findElement(\n  By.xpath(XPATH.selectMethodPopup)\n);\nconst inputPath = await driver.findElement(By.xpath(XPATH.inputPathPopup));\nconst inputResponseCode = await driver.findElement(\n  By.xpath(XPATH.inputResponseCodePopup)\n);\nconst inputRequest = await driver.findElement(\n  By.xpath(XPATH.textAreaRequestPopup)\n);\nconst inputResponse = await driver.findElement(\n  By.xpath(XPATH.textAreaResponsePopup)\n);\nconst btnAddPopup = await driver.findElement(\n  By.xpath(XPATH.btnAddAPIPopup)\n);\nawait driver.actions().sendKeys(inputName, \"test\").perform();\nconst optionSelect = await selectPath.findElement(\n  By.xpath(`//option[. = 'GET']`)\n);\nawait optionSelect.click();\nawait driver.actions().sendKeys(inputPath, \"/test\").perform();\nawait driver.actions().sendKeys(inputResponseCode, \"200\").perform();\nawait driver\n  .actions()\n  .sendKeys(inputRequest, `{\"request\": \"request\"}`)\n  .perform();\n// await driver\n//   .actions()\n//   .sendKeys(inputResponse, \"{'response': 'response'}\")\n//   .perform();\n// response field is not filled\nawait btnAddPopup.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 1000))\n  .getText();\nassert.ok(notificationText.includes(UI_TEXT.notificationRequiredFields));",
              "err": {},
              "uuid": "c3d641b2-2092-42ab-ad93-ac49df5ae60e",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to request API when request field is empty",
              "fullTitle": "User Able to request API when request field is empty",
              "timedOut": false,
              "duration": 1340,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nawait btnAddAPI.click();\nconst inputName = await driver.findElement(By.xpath(XPATH.inputNamePopup));\nconst selectPath = await driver.findElement(\n  By.xpath(XPATH.selectMethodPopup)\n);\nconst inputPath = await driver.findElement(By.xpath(XPATH.inputPathPopup));\nconst inputResponseCode = await driver.findElement(\n  By.xpath(XPATH.inputResponseCodePopup)\n);\nconst inputResponse = await driver.findElement(\n  By.xpath(XPATH.textAreaResponsePopup)\n);\nconst btnAddPopup = await driver.findElement(\n  By.xpath(XPATH.btnAddAPIPopup)\n);\nawait driver.actions().sendKeys(inputName, \"testx\").perform();\nconst optionSelect = await selectPath.findElement(\n  By.xpath(`//option[. = 'GET']`)\n);\nawait optionSelect.click();\nawait driver.actions().sendKeys(inputPath, \"/testx\").perform();\nawait driver.actions().sendKeys(inputResponseCode, \"200\").perform();\nawait driver\n  .actions()\n  .sendKeys(inputResponse, `{\"response\": \"response\"}`)\n  .perform();\nawait btnAddPopup.click();\nconst notificationText = await driver\n  .wait(until.elementLocated(By.xpath(XPATH.notification), 10000))\n  .getText();\nassert.ok(notificationText.includes(UI_TEXT.notificationSuccess));",
              "err": {},
              "uuid": "d5a93d63-729f-46a0-b700-eeff678433f9",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to close popup when cancel button is clicked",
              "fullTitle": "User Able to close popup when cancel button is clicked",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const btnAddAPI = await driver.findElement(By.xpath(XPATH.btnAddAPI));\nawait btnAddAPI.click();\nconst btnCancel = await driver.findElement(\n  By.xpath(XPATH.btnCancelAPIPopup)\n);\nawait btnCancel.click();\nconst popup = await driver.findElement(By.xpath(XPATH.popupAddEdit));\nconst displayValue = await popup.getCssValue(\"display\");\nassert.ok(displayValue == \"none\");",
              "err": {},
              "uuid": "ab4dd8eb-cd83-48d4-a9c1-dea73cfcc2e9",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to redirect to linkedin page",
              "fullTitle": "User Able to redirect to linkedin page",
              "timedOut": false,
              "duration": 3050,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const currentTabId = await driver.getWindowHandle();\nconst linkLinkedinBE = await driver.findElement(\n  By.xpath(XPATH.btnLinkedinBE)\n);\nconst linkLinkedinFE = await driver.findElement(\n  By.xpath(XPATH.btnLinkedinFE)\n);\nconst handleRedirect = async (link) => {\n  await link.click();\n  await driver.wait(\n    async () => (await driver.getAllWindowHandles()).length === 2,\n    10000\n  );\n  const tabs = await driver.getAllWindowHandles();\n  const newTab = tabs.find((tab) => tab !== currentTabId);\n  await driver.switchTo().window(newTab);\n  const newTabUrl = await driver.getCurrentUrl();\n  assert.ok(newTabUrl.includes(\"linkedin\"));\n  await driver.close();\n  await driver.switchTo().window(currentTabId);\n};\nawait handleRedirect(linkLinkedinBE);\nawait handleRedirect(linkLinkedinFE);",
              "err": {},
              "uuid": "ca630d64-dfaa-41f4-b7d9-d26847a1b1fa",
              "parentUUID": "5cd4eb25-664c-49d5-a16b-9c6e2a58549c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31c4bd97-cb4e-4c0c-bd4c-210bd1d8023a",
            "cb9d3aa4-cea1-4cfe-af6d-ce69f86042af",
            "32f16576-a7a2-46f0-ab26-23acd753ba00",
            "425f57a0-6c83-4f2b-b1b9-09ba3c2cd93a",
            "abf90043-3de5-4399-b853-126d1ee94752",
            "0ffc45b6-acbe-47e3-ab2c-ab6df7c9cffa",
            "0c219cbd-bad6-4db9-bc4d-fe95278032bc",
            "c3d641b2-2092-42ab-ad93-ac49df5ae60e",
            "d5a93d63-729f-46a0-b700-eeff678433f9",
            "ab4dd8eb-cd83-48d4-a9c1-dea73cfcc2e9",
            "ca630d64-dfaa-41f4-b7d9-d26847a1b1fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13290,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}